//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.42000
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace CbuPortal.NotificationEvents {
    
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.ServiceContractAttribute(ConfigurationName="NotificationEvents.INotificationEvents")]
    public interface INotificationEvents {
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/INotificationEvents/NotificationAdd", ReplyAction="http://tempuri.org/INotificationEvents/NotificationAddResponse")]
        bool NotificationAdd(MongoDB.Bson.ObjectId UserID, MongoDB.Bson.ObjectId NotificationObjectID, int NotificationInfo);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/INotificationEvents/NotificationAdd", ReplyAction="http://tempuri.org/INotificationEvents/NotificationAddResponse")]
        System.Threading.Tasks.Task<bool> NotificationAddAsync(MongoDB.Bson.ObjectId UserID, MongoDB.Bson.ObjectId NotificationObjectID, int NotificationInfo);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/INotificationEvents/NotificationsTrueGet", ReplyAction="http://tempuri.org/INotificationEvents/NotificationsTrueGetResponse")]
        CbuPortal.Entity.Models.tblNotificationsInformation[] NotificationsTrueGet(MongoDB.Bson.ObjectId userID);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/INotificationEvents/NotificationsTrueGet", ReplyAction="http://tempuri.org/INotificationEvents/NotificationsTrueGetResponse")]
        System.Threading.Tasks.Task<CbuPortal.Entity.Models.tblNotificationsInformation[]> NotificationsTrueGetAsync(MongoDB.Bson.ObjectId userID);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/INotificationEvents/NotificationsFalseGet", ReplyAction="http://tempuri.org/INotificationEvents/NotificationsFalseGetResponse")]
        CbuPortal.Entity.Models.tblNotificationsInformation[] NotificationsFalseGet(MongoDB.Bson.ObjectId userID);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/INotificationEvents/NotificationsFalseGet", ReplyAction="http://tempuri.org/INotificationEvents/NotificationsFalseGetResponse")]
        System.Threading.Tasks.Task<CbuPortal.Entity.Models.tblNotificationsInformation[]> NotificationsFalseGetAsync(MongoDB.Bson.ObjectId userID);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/INotificationEvents/NotificationsSeem", ReplyAction="http://tempuri.org/INotificationEvents/NotificationsSeemResponse")]
        bool NotificationsSeem(MongoDB.Bson.ObjectId userID);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/INotificationEvents/NotificationsSeem", ReplyAction="http://tempuri.org/INotificationEvents/NotificationsSeemResponse")]
        System.Threading.Tasks.Task<bool> NotificationsSeemAsync(MongoDB.Bson.ObjectId userID);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/INotificationEvents/NotificationsGetShare", ReplyAction="http://tempuri.org/INotificationEvents/NotificationsGetShareResponse")]
        WcfService1.tblShareInformation NotificationsGetShare(MongoDB.Bson.ObjectId shareID);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/INotificationEvents/NotificationsGetShare", ReplyAction="http://tempuri.org/INotificationEvents/NotificationsGetShareResponse")]
        System.Threading.Tasks.Task<WcfService1.tblShareInformation> NotificationsGetShareAsync(MongoDB.Bson.ObjectId shareID);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/INotificationEvents/updateAvatar", ReplyAction="http://tempuri.org/INotificationEvents/updateAvatarResponse")]
        bool updateAvatar(MongoDB.Bson.ObjectId userID, string url);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/INotificationEvents/updateAvatar", ReplyAction="http://tempuri.org/INotificationEvents/updateAvatarResponse")]
        System.Threading.Tasks.Task<bool> updateAvatarAsync(MongoDB.Bson.ObjectId userID, string url);
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public interface INotificationEventsChannel : CbuPortal.NotificationEvents.INotificationEvents, System.ServiceModel.IClientChannel {
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class NotificationEventsClient : System.ServiceModel.ClientBase<CbuPortal.NotificationEvents.INotificationEvents>, CbuPortal.NotificationEvents.INotificationEvents {
        
        public NotificationEventsClient() {
        }
        
        public NotificationEventsClient(string endpointConfigurationName) : 
                base(endpointConfigurationName) {
        }
        
        public NotificationEventsClient(string endpointConfigurationName, string remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public NotificationEventsClient(string endpointConfigurationName, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public NotificationEventsClient(System.ServiceModel.Channels.Binding binding, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(binding, remoteAddress) {
        }
        
        public bool NotificationAdd(MongoDB.Bson.ObjectId UserID, MongoDB.Bson.ObjectId NotificationObjectID, int NotificationInfo) {
            return base.Channel.NotificationAdd(UserID, NotificationObjectID, NotificationInfo);
        }
        
        public System.Threading.Tasks.Task<bool> NotificationAddAsync(MongoDB.Bson.ObjectId UserID, MongoDB.Bson.ObjectId NotificationObjectID, int NotificationInfo) {
            return base.Channel.NotificationAddAsync(UserID, NotificationObjectID, NotificationInfo);
        }
        
        public CbuPortal.Entity.Models.tblNotificationsInformation[] NotificationsTrueGet(MongoDB.Bson.ObjectId userID) {
            return base.Channel.NotificationsTrueGet(userID);
        }
        
        public System.Threading.Tasks.Task<CbuPortal.Entity.Models.tblNotificationsInformation[]> NotificationsTrueGetAsync(MongoDB.Bson.ObjectId userID) {
            return base.Channel.NotificationsTrueGetAsync(userID);
        }
        
        public CbuPortal.Entity.Models.tblNotificationsInformation[] NotificationsFalseGet(MongoDB.Bson.ObjectId userID) {
            return base.Channel.NotificationsFalseGet(userID);
        }
        
        public System.Threading.Tasks.Task<CbuPortal.Entity.Models.tblNotificationsInformation[]> NotificationsFalseGetAsync(MongoDB.Bson.ObjectId userID) {
            return base.Channel.NotificationsFalseGetAsync(userID);
        }
        
        public bool NotificationsSeem(MongoDB.Bson.ObjectId userID) {
            return base.Channel.NotificationsSeem(userID);
        }
        
        public System.Threading.Tasks.Task<bool> NotificationsSeemAsync(MongoDB.Bson.ObjectId userID) {
            return base.Channel.NotificationsSeemAsync(userID);
        }
        
        public WcfService1.tblShareInformation NotificationsGetShare(MongoDB.Bson.ObjectId shareID) {
            return base.Channel.NotificationsGetShare(shareID);
        }
        
        public System.Threading.Tasks.Task<WcfService1.tblShareInformation> NotificationsGetShareAsync(MongoDB.Bson.ObjectId shareID) {
            return base.Channel.NotificationsGetShareAsync(shareID);
        }
        
        public bool updateAvatar(MongoDB.Bson.ObjectId userID, string url) {
            return base.Channel.updateAvatar(userID, url);
        }
        
        public System.Threading.Tasks.Task<bool> updateAvatarAsync(MongoDB.Bson.ObjectId userID, string url) {
            return base.Channel.updateAvatarAsync(userID, url);
        }
    }
}
